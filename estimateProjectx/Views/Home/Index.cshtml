@model IEnumerable<estimateProjectx.Models.Session>
@using estimateProjectx.Models
@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Home Page";
}

@functions {
    public async Task<string> GetUserEmail(string userId)
    {
        var user = await UserManager.FindByIdAsync(userId);
        return user != null ? user.Email : "Unknown";
    }
}

<div class="text-center">
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#createSessionModal">
        Create Session
    </button>
</div>

@if (Model == null || !Model.Any())
{
    <p>No sessions found.</p>
}
else
{
    <div>
        @foreach (var session in Model)
        {
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title">@session.Title</h5>
                    <p class="card-text">@session.Description</p>
                    <p class="card-text">Created by: @await GetUserEmail(session.IdentityUserId)</p>

                    @if (session.VotesCount >= 0 && session.VotesCount == UserManager.Users.Count())
                    {
                        <p class="card-text">Estimators & their estimation</p>
                        <ul class="list-group">
                            @if (session.Votes != null && session.Votes.Any())
                            {
                                <!-- Calculate and display average vote -->
                                var totalVotes = session.Votes.Count();
                                var averageVote = session.Votes.Sum(vote => vote.VoteValue) / totalVotes;

                                <!-- Display individual votes -->
                                @foreach (var vote in session.Votes)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>@await GetUserEmail(vote.IdentityUserId)</span>
                                        <span>@vote.VoteValue</span>
                                    </li>
                                }

                                <div class="alert alert-success text-center mt-3" role="alert">
                                    <h5 class="alert-heading">The Estimation we recommend:</h5>
                                    <button class="btn btn-success" disabled>@averageVote</button>
                                </div>


                            }
                            else
                            {
                                <li class="list-group-item">No votes yet.</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="card-text">
                            Votes: Hidden <span id="progress-@session.Id">@session.VotesCount/@UserManager.Users.Count()</span>
                        </p>
                    }
                    <br>
                    <div>
                        <div class="d-flex align-items-center">
                            <a asp-action="EndSession" asp-route-id="@session.Id" class="btn btn-link">End Session</a>

                            <button type="button" class="btn btn-link ml-2" onclick="location.href='@Url.Action("Edit", new { id = session.Id })'"
                            @(session.VotesCount == UserManager.Users.Count() ? "disabled" : "")>
                                Edit
                            </button>
                        


                        <button type="button" class="btn btn-primary estimate-button"
                                data-toggle="modal" data-target="#voteModal" data-session-id="@session.Id"
                        @(session.VotesCount == UserManager.Users.Count() ||
                            session.Votes.Any(v => v.IdentityUserId == UserManager.GetUserId(User)) ? "disabled" : "")>
                            @(session.VotesCount == UserManager.Users.Count()
                                ? "Estimation is over"
                                : (session.Votes.Any(v => v.IdentityUserId == UserManager.GetUserId(User))
                                ? $"You already estimated: {session.Votes.First(v => v.IdentityUserId == UserManager.GetUserId(User)).VoteValue}"
                                : "Estimate"))
                        </button>
                        </div>
                    </div>


                </div>
            </div>
        }
    </div>




}

<!-- Modal Session -->
<div class="modal fade" id="createSessionModal" tabindex="-1" role="dialog" aria-labelledby="createSessionModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createSessionModalLabel">Create Session</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @await Html.PartialAsync("Create.cshtml", new estimateProjectx.Models.Session())

            </div>
        </div>
    </div>
</div>

<!-- Modal Vote -->
<div class="modal fade" id="voteModal" tabindex="-1" role="dialog" aria-labelledby="voteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="voteModalLabel">What do you think?</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @await Html.PartialAsync("~/Views/Votes/Create.cshtml", new estimateProjectx.Models.Vote())

            </div>

        </div>
    </div>
</div>

<!-- Script to handle form submission -->
@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            $("form#voteForm").submit(function (event) {
                event.preventDefault(); // Prevents the default form submission

                // Fetch the vote value from the form data
                var voteValue = $(this).find("input[name='VoteValue']").val();
                var sessionId = $(this).find("input[name='SessionId']").val(); // Assuming you have a SessionId field in your form
                var identityUserId = $(this).find("input[name='IdentityUserId']").val(); // Assuming you have an IdentityUserId field in your form

                // Make an AJAX POST request to create the vote
                $.ajax({
                    url: '@Url.Action("Create", "Votes")',
                    type: 'POST',
                    data: {
                        VoteValue: voteValue,
                        SessionId: sessionId,
                        IdentityUserId: identityUserId
                    },
                    success: function (response) {
                        // Handle the success response as needed
                        console.log("Vote created successfully!");
                    },
                    error: function (xhr, status, error) {
                        // Handle the error response as needed
                        console.error("Error creating vote:", error);
                    }
                });
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $('.estimate-button').click(function () {
                var sessionId = $(this).data('session-id');
                $('#voteModal').find("input[name='SessionId']").val(sessionId);
            });
        });

    </script>
}
